if (bn < NINDIRECT*NINDIRECT) {
printf("double indirect block");
    if((addr = ip->addrs[NDIRECT + 1]) == 0)
      // double-indirect block itself not yet allocated
      ip->addrs[NDIRECT + 1] = addr = balloc(ip->dev);

    // Read+lock double-indirect block
    bp = bread(ip->dev, addr);
    a = (uint*)bp->data;

see https://www.youtube.com/watch?v=hZpom8ouYD8&t=1476s

now we have the double-indirect block in the array a. So we look for the correct indirect block whose address is given by
a[bn/ NINDIRECT]. 
if the pointer is not yet allocated to the indirect block then
   we allocate a new block with balloc for the indirect block.
   we write the double indirect block back to the disk with log_write
endif

release the double indirect block with brelse(bp);
now we read and lock the indirect block and get the indirect block data in the array a. So we look for the 
correct data block whose address is given by a[bn% NINDIRECT]. 
if the pointer is not yet allocated to the data block then
   we allocate the data block with balloc
   we write the indirect block back to the disk with log_write
endif
   
 
    brelse(bp);
    return addr;
  }
}
  
